name: mvvm_flutter_template
description: >
  قالب پروژه فلاتر بر اساس معماری MVVM با استفاده از Riverpod و Freezed.
  این قالب شامل پوشه‌بندی مدرن، کدهای تکراری و مثال‌های کاربردی برای هر لایه از پروژه می‌باشد.
version: 1.0.0

# تعریف پارامترهای ورودی برای سفارشی‌سازی قالب
vars:
  project_name:
    type: string
    description: نام پروژه فلاتر
  feature_name:
    type: string
    description: نام ویژگی یا ماژول مورد نظر
  package_name:
    type: string
    description: نام پکیج برای پروژه (به صورت com.example.project)
    
# تعریف پوشه‌بندی مورد نظر
files:
  - path: lib/core/constants/constants.dart
    data: |
      // فایل Constants - متغیرهای عمومی پروژه
      class AppConstants {
        static const String appName = '{{ project_name }}';
        // سایر کانستنت‌های پروژه
      }
      
  - path: lib/core/enums/app_enums.dart
    data: |
      // تعریف Enum های عمومی
      enum AppStatus { loading, success, error }
      
  - path: lib/core/exceptions/app_exceptions.dart
    data: |
      // مدیریت استثناهای عمومی
      class AppException implements Exception {
        final String message;
        AppException(this.message);
      }
      
  - path: lib/core/extensions/string_extensions.dart
    data: |
      // اکستنشن‌های عمومی برای String
      extension StringExtensions on String {
        String capitalize() => this[0].toUpperCase() + substring(1);
      }
      
  - path: lib/core/utils/date_utils.dart
    data: |
      // توابع کمکی مربوط به تاریخ
      class DateUtils {
        static String formatDate(DateTime date) {
          // قالب‌بندی تاریخ
          return '${date.year}-${date.month}-${date.day}';
        }
      }
      
  - path: lib/data/models/{{ feature_name }}_model.dart
    data: |
      // مدل داده‌ای با استفاده از Freezed
      import 'package:freezed_annotation/freezed_annotation.dart';
      
      part '{{ feature_name }}_model.freezed.dart';
      part '{{ feature_name }}_model.g.dart';
      
      @freezed
      class {{ feature_name.pascalCase() }}Model with _${{ feature_name.pascalCase() }}Model {
        const factory {{ feature_name.pascalCase() }}Model({
          required int id,
          required String name,
        }) = _{{ feature_name.pascalCase() }}Model;
      
        factory {{ feature_name.pascalCase() }}Model.fromJson(Map<String, dynamic> json) =>
            _${{ feature_name.pascalCase() }}ModelFromJson(json);
      }
      
  - path: lib/data/providers/{{ feature_name }}_api_provider.dart
    data: |
      // provider مربوط به API یا سرویس‌های داده‌ای
      import 'package:flutter_riverpod/flutter_riverpod.dart';
      
      final {{ feature_name.camelCase() }}ApiProvider = Provider<{{ feature_name.pascalCase() }}Api>((ref) {
        return {{ feature_name.pascalCase() }}Api();
      });
      
      class {{ feature_name.pascalCase() }}Api {
        // متدهای فراخوانی API
        Future<void> fetchData() async {
          // پیاده‌سازی درخواست
        }
      }
      
  - path: lib/data/repositories/{{ feature_name }}_repository.dart
    data: |
      // پیاده‌سازی repository مربوط به ویژگی مورد نظر
      import '../models/{{ feature_name }}_model.dart';
      import '../providers/{{ feature_name }}_api_provider.dart';
      
      class {{ feature_name.pascalCase() }}Repository {
        final {{ feature_name.pascalCase() }}Api api;
      
        {{ feature_name.pascalCase() }}Repository({required this.api});
      
        Future<{{ feature_name.pascalCase() }}Model> getData() async {
          // فراخوانی API و تبدیل داده‌ها به مدل
          await api.fetchData();
          // اینجا می‌توانید از داده‌های واقعی استفاده کنید
          return {{ feature_name.pascalCase() }}Model(id: 1, name: 'Sample');
        }
      }
      
  - path: lib/features/{{ feature_name }}/views/{{ feature_name }}_view.dart
    data: |
      // صفحه اصلی ویژگی
      import 'package:flutter/material.dart';
      import 'package:flutter_riverpod/flutter_riverpod.dart';
      
      import '../viewmodels/{{ feature_name }}_viewmodel.dart';
      
      class {{ feature_name.pascalCase() }}View extends ConsumerWidget {
        const {{ feature_name.pascalCase() }}View({Key? key}) : super(key: key);
      
        @override
        Widget build(BuildContext context, WidgetRef ref) {
          final viewModel = ref.watch({{ feature_name.camelCase() }}ViewModelProvider);
      
          return Scaffold(
            appBar: AppBar(
              title: Text('{{ feature_name.pascalCase() }}'),
            ),
            body: Center(
              child: viewModel.isLoading
                  ? CircularProgressIndicator()
                  : Text('Data: ${viewModel.data}'),
            ),
          );
        }
      }
      
  - path: lib/features/{{ feature_name }}/viewmodels/{{ feature_name }}_viewmodel.dart
    data: |
      // ViewModel مربوط به ویژگی با استفاده از StateNotifier و Riverpod
      import 'package:flutter_riverpod/flutter_riverpod.dart';
      import '../../../data/repositories/{{ feature_name }}_repository.dart';
      
      final {{ feature_name.camelCase() }}ViewModelProvider =
          StateNotifierProvider<{{ feature_name.pascalCase() }}ViewModel, {{ feature_name.pascalCase() }}State>(
        (ref) => {{ feature_name.pascalCase() }}ViewModel(
          repository: {{ feature_name.pascalCase() }}Repository(
            api: ref.read({{ feature_name.camelCase() }}ApiProvider),
          ),
        ),
      );
      
      class {{ feature_name.pascalCase() }}State {
        final bool isLoading;
        final String data;
      
        {{ feature_name.pascalCase() }}State({this.isLoading = false, this.data = ''});
      
        {{ feature_name.pascalCase() }}State copyWith({
          bool? isLoading,
          String? data,
        }) {
          return {{ feature_name.pascalCase() }}State(
            isLoading: isLoading ?? this.isLoading,
            data: data ?? this.data,
          );
        }
      }
      
      class {{ feature_name.pascalCase() }}ViewModel extends StateNotifier<{{ feature_name.pascalCase() }}State> {
        final {{ feature_name.pascalCase() }}Repository repository;
      
        {{ feature_name.pascalCase() }}ViewModel({required this.repository})
            : super({{ feature_name.pascalCase() }}State());
      
        Future<void> loadData() async {
          state = state.copyWith(isLoading: true);
          // فراخوانی repository
          final result = await repository.getData();
          state = state.copyWith(isLoading: false, data: result.name);
        }
      }
      
  - path: lib/features/{{ feature_name }}/widgets/{{ feature_name }}_custom_widget.dart
    data: |
      // ویجت اختصاصی مربوط به ویژگی
      import 'package:flutter/material.dart';
      
      class {{ feature_name.pascalCase() }}CustomWidget extends StatelessWidget {
        final String text;
      
        const {{ feature_name.pascalCase() }}CustomWidget({Key? key, required this.text}) : super(key: key);
      
        @override
        Widget build(BuildContext context) {
          return Container(
            padding: const EdgeInsets.all(8.0),
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey),
              borderRadius: BorderRadius.circular(8.0),
            ),
            child: Text(text),
          );
        }
      }
      
  - path: lib/providers/app_providers.dart
    data: |
      // providerهای سطح برنامه مانند Theme و Localization
      import 'package:flutter_riverpod/flutter_riverpod.dart';
      import 'package:flutter/material.dart';
      
      final themeProvider = Provider<ThemeData>((ref) {
        return ThemeData.light();
      });
      
      // سایر provider های سراسری
     
  - path: lib/routes/app_routes.dart
    data: |
      // مدیریت مسیرها در پروژه
      import 'package:flutter/material.dart';
      import '../features/{{ feature_name }}/views/{{ feature_name }}_view.dart';
      
      class AppRoutes {
        static Map<String, WidgetBuilder> getRoutes() {
          return {
            '/': (context) => const {{ feature_name.pascalCase() }}View(),
            // مسیرهای دیگر پروژه
          };
        }
      }
      
  - path: lib/main.dart
    data: |
      // نقطه ورود برنامه
      import 'package:flutter/material.dart';
      import 'package:flutter_riverpod/flutter_riverpod.dart';
      import 'routes/app_routes.dart';
      
      void main() {
        runApp(const ProviderScope(child: MyApp()));
      }
      
      class MyApp extends StatelessWidget {
        const MyApp({Key? key}) : super(key: key);
      
        @override
        Widget build(BuildContext context) {
          return MaterialApp(
            title: '{{ project_name }}',
            theme: ThemeData.light(),
            routes: AppRoutes.getRoutes(),
            initialRoute: '/',
          );
        }
      } 